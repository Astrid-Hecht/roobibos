require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/customers", type: :request do

  describe "GET /show" do
    it "renders a successful response" do
      customer = create(:customer)
      create_list(:subscription, 5, customer: customer)
      get "/api/v1/customers/#{customer.id}"
      expect(response).to be_successful
      body = JSON.parse(response.body, symbolize_names: true)
      expect(body).to be_a Hash
      expect(body.keys).to eq([:data])
      expect(body[:data].keys).to eq([:id, :type, :attributes])
      expect(body[:data][:id]).to match(/^[0-9]*[1-9][0-9]*$/)
      expect(body[:data][:type]).to eq("customer")
      expect(body[:data][:attributes]).to be_a Hash
      expect(body[:data][:attributes].keys).to eq([:first_name, :last_name, :email, :address, :subscriptions])
      expect(body[:data][:attributes][:subscriptions]).to be_an Array
      expect(body[:data][:attributes][:subscriptions][0].keys).to eq([:id, :customer_id, :title, :price, :status, :frequency, :created_at, :updated_at])
      expect(body[:data][:attributes][:subscriptions][0][:customer_id]).to eq(customer.id)
    end

    it "renders a 404 error if customer isn't found" do
      customer = create(:customer)
      create_list(:subscription, 5, customer: customer)
      get "/api/v1/customers/#{customer.id + 1}"
      expect(response).not_to be_successful
      body = JSON.parse(response.body, symbolize_names: true)
      expect(body).to be_a Hash
      expect(body.keys).to eq([:error])
      expect(body[:error]).to be_a Array
      expect(body[:error][0].keys).to eq([:status, :message, :code])
      expect(body[:error][0][:status]).to eq("NOT FOUND")
      expect(body[:error][0][:message]).to eq("Object with matching id not found")
      expect(body[:error][0][:code]).to eq(404)
    end
  end
end
