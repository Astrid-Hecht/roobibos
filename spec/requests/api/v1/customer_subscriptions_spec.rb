require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/customer_subscriptions", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # CustomerSubscription. As you add validations to CustomerSubscription, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CustomerSubscriptionsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    { 'CONTENT_TYPE' => 'application/json' }
  }

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes_sub) {
        skip("Add a hash of attributes valid for your model")
      }
      let(:new_attributes_unsub) {
        skip("Add a hash of attributes valid for your model")
      }

      context "subscribing" do
        it "updates the requested customer_subscription" do
          customer = create(:customer)
          subscription = create(:subscription)
          customer_subscription = create(:customer_subscription, customer: customer, subscription: subscription, status: 0)
          patch customer_subscription_url(customer_subscription),
                params: { customer_id: customer.id, subscription_id: subscription.id, new_status: 1 }, headers: valid_headers, as: :json
          customer_subscription.reload
          skip("Add assertions for updated state")
        end

        it "renders a JSON response with the customer_subscription" do
          customer = create(:customer)
          subscription = create(:subscription)
          customer_subscription = create(:customer_subscription, customer: customer, subscription: subscription, status: 0)
          patch customer_subscription_url(customer_subscription),
                params: { customer_id: customer.id, subscription_id: subscription.id, new_status: 1 }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to match(a_string_including("application/json"))
        end
      end

      context "unsubscribing" do
        it "updates the requested customer_subscription" do
          customer = create(:customer)
          subscription = create(:subscription)
          customer_subscription = create(:customer_subscription, customer: customer, subscription: subscription, status: 1)
          patch customer_subscription_url(customer_subscription),
                params: { customer_id: customer.id, subscription_id: subscription.id, new_status: 0 }, headers: valid_headers, as: :json
          customer_subscription.reload
          skip("Add assertions for updated state")
        end

        it "renders a JSON response with the customer_subscription" do
          customer = create(:customer)
          subscription = create(:subscription)
          customer_subscription = create(:customer_subscription, customer: customer, subscription: subscription, status: 1)
          patch customer_subscription_url(customer_subscription),
                params: { customer_id: customer.id, subscription_id: subscription.id, new_status: 0 }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to match(a_string_including("application/json"))
        end
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the customer_subscription" do
        customer = create(:customer)
        subscription = create(:subscription)
        customer_subscription = create(:customer_subscription, customer: customer, subscription: subscription)
        patch customer_subscription_url(customer_subscription),
              params: { customer_subscription: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end
end
